use std::str::FromStr;
use crate::parser_result::*;

use lalrpop_util::ParseError;

use calculator::*;

grammar;

pub Expr: Option<ParserResult> = {
    <AS> => Some(<>),
    r"#.{0,}" => ParserResult::ignore(),
};

LeftOp<Op, NextOp>: ParserResult = {
    <xx:LeftOp<Op,NextOp>> <op:Op> <yy:NextOp> => {
        let x = xx.gf;
        let y = yy.gf;
        let gf = (op.f)(x, y);

        let rpn = xx.rpn + " " + yy.rpn.as_str() + " " + op.str;

        return ParserResult::new(rpn, gf);
    },
    NextOp,
};

UnaryOp<Op, NextOp>: ParserResult = {
    <op:Op> <n:UnaryOp<Op, NextOp>> => {
            let gf = (op.f)(n.gf);
            let rpn = n.rpn + " " + op.str;

            return ParserResult::new(rpn, gf);
        },
    NextOp,
};

AdditionAndSubtraction: BinaryOperation = {
    "+" => BinaryOperation::new(add, "+"),
    "-" => BinaryOperation::new(sub, "-"),
};

MultiplicationAndDivision: BinaryOperation = {
    "*" => BinaryOperation::new(mul, "*"),
    "/" => BinaryOperation::new(div, "/"),
};

Exponent: BinaryOperation = {
    "^" => BinaryOperation::new(pow, "^"),
};

Negation: UnaryOperation  = {
    "-" => UnaryOperation::new(neg, "~"),
};

AS = LeftOp<AdditionAndSubtraction, MD>;
MD = LeftOp<MultiplicationAndDivision, N>;
N = UnaryOp<Negation, E>;

E: ParserResult = {
    <xx:Term> <op:Exponent> <yy:ExponentN> => {
        let x = xx.gf;
        let y = yy.gf;
        let gf = (op.f)(x, y);

        let rpn = xx.rpn + " " + yy.rpn.as_str() + " " + op.str;

        return ParserResult::new(rpn, gf);
    },
    Term,
};

ExponentAS = LeftOp<AdditionAndSubtraction, ExponentMD>;
ExponentMD = LeftOp<MultiplicationAndDivision, ExponentN>;
ExponentN = UnaryOp<Negation, ExponentTerm>;

ExponentTerm: ParserResult = {
    <Num> => ParserResult::new(<>.to_string(), GF::try_new(<>, 1234576)),
    "(" <ExponentAS> ")"
};


Term: ParserResult = {
    <Num> => ParserResult::new(<>.to_string(), GF::try_new(<>, 1234577)),
    "(" <AS> ")"
};

Num: i64 = {
    r"[0-9]+" =>? i64::from_str(<>)
        .map_err(|_| ParseError::User {
            error: "number is too big"
        }),
};

